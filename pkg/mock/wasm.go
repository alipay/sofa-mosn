// Code generated by MockGen. DO NOT EDIT.
// Source: ../types/wasm.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	v2 "mosn.io/mosn/pkg/config/v2"
	types "mosn.io/mosn/pkg/types"
	reflect "reflect"
)

// MockWasmManager is a mock of WasmManager interface.
type MockWasmManager struct {
	ctrl     *gomock.Controller
	recorder *MockWasmManagerMockRecorder
}

// MockWasmManagerMockRecorder is the mock recorder for MockWasmManager.
type MockWasmManagerMockRecorder struct {
	mock *MockWasmManager
}

// NewMockWasmManager creates a new mock instance.
func NewMockWasmManager(ctrl *gomock.Controller) *MockWasmManager {
	mock := &MockWasmManager{ctrl: ctrl}
	mock.recorder = &MockWasmManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmManager) EXPECT() *MockWasmManagerMockRecorder {
	return m.recorder
}

// AddOrUpdateWasm mocks base method.
func (m *MockWasmManager) AddOrUpdateWasm(wasmConfig v2.WasmPluginConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateWasm", wasmConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateWasm indicates an expected call of AddOrUpdateWasm.
func (mr *MockWasmManagerMockRecorder) AddOrUpdateWasm(wasmConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateWasm", reflect.TypeOf((*MockWasmManager)(nil).AddOrUpdateWasm), wasmConfig)
}

// GetWasmPluginWrapperByName mocks base method.
func (m *MockWasmManager) GetWasmPluginWrapperByName(pluginName string) types.WasmPluginWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWasmPluginWrapperByName", pluginName)
	ret0, _ := ret[0].(types.WasmPluginWrapper)
	return ret0
}

// GetWasmPluginWrapperByName indicates an expected call of GetWasmPluginWrapperByName.
func (mr *MockWasmManagerMockRecorder) GetWasmPluginWrapperByName(pluginName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWasmPluginWrapperByName", reflect.TypeOf((*MockWasmManager)(nil).GetWasmPluginWrapperByName), pluginName)
}

// UninstallWasmPluginByName mocks base method.
func (m *MockWasmManager) UninstallWasmPluginByName(pluginName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallWasmPluginByName", pluginName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallWasmPluginByName indicates an expected call of UninstallWasmPluginByName.
func (mr *MockWasmManagerMockRecorder) UninstallWasmPluginByName(pluginName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallWasmPluginByName", reflect.TypeOf((*MockWasmManager)(nil).UninstallWasmPluginByName), pluginName)
}

// MockWasmPluginWrapper is a mock of WasmPluginWrapper interface.
type MockWasmPluginWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockWasmPluginWrapperMockRecorder
}

// MockWasmPluginWrapperMockRecorder is the mock recorder for MockWasmPluginWrapper.
type MockWasmPluginWrapperMockRecorder struct {
	mock *MockWasmPluginWrapper
}

// NewMockWasmPluginWrapper creates a new mock instance.
func NewMockWasmPluginWrapper(ctrl *gomock.Controller) *MockWasmPluginWrapper {
	mock := &MockWasmPluginWrapper{ctrl: ctrl}
	mock.recorder = &MockWasmPluginWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmPluginWrapper) EXPECT() *MockWasmPluginWrapperMockRecorder {
	return m.recorder
}

// GetPlugin mocks base method.
func (m *MockWasmPluginWrapper) GetPlugin() types.WasmPlugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugin")
	ret0, _ := ret[0].(types.WasmPlugin)
	return ret0
}

// GetPlugin indicates an expected call of GetPlugin.
func (mr *MockWasmPluginWrapperMockRecorder) GetPlugin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugin", reflect.TypeOf((*MockWasmPluginWrapper)(nil).GetPlugin))
}

// GetConfig mocks base method.
func (m *MockWasmPluginWrapper) GetConfig() v2.WasmPluginConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(v2.WasmPluginConfig)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockWasmPluginWrapperMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockWasmPluginWrapper)(nil).GetConfig))
}

// RegisterPluginHandler mocks base method.
func (m *MockWasmPluginWrapper) RegisterPluginHandler(pluginHandler types.WasmPluginHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterPluginHandler", pluginHandler)
}

// RegisterPluginHandler indicates an expected call of RegisterPluginHandler.
func (mr *MockWasmPluginWrapperMockRecorder) RegisterPluginHandler(pluginHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPluginHandler", reflect.TypeOf((*MockWasmPluginWrapper)(nil).RegisterPluginHandler), pluginHandler)
}

// Update mocks base method.
func (m *MockWasmPluginWrapper) Update(config v2.WasmPluginConfig, plugin types.WasmPlugin) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", config, plugin)
}

// Update indicates an expected call of Update.
func (mr *MockWasmPluginWrapperMockRecorder) Update(config, plugin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWasmPluginWrapper)(nil).Update), config, plugin)
}

// MockWasmPluginHandler is a mock of WasmPluginHandler interface.
type MockWasmPluginHandler struct {
	ctrl     *gomock.Controller
	recorder *MockWasmPluginHandlerMockRecorder
}

// MockWasmPluginHandlerMockRecorder is the mock recorder for MockWasmPluginHandler.
type MockWasmPluginHandlerMockRecorder struct {
	mock *MockWasmPluginHandler
}

// NewMockWasmPluginHandler creates a new mock instance.
func NewMockWasmPluginHandler(ctrl *gomock.Controller) *MockWasmPluginHandler {
	mock := &MockWasmPluginHandler{ctrl: ctrl}
	mock.recorder = &MockWasmPluginHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmPluginHandler) EXPECT() *MockWasmPluginHandlerMockRecorder {
	return m.recorder
}

// OnConfigUpdate mocks base method.
func (m *MockWasmPluginHandler) OnConfigUpdate(config v2.WasmPluginConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnConfigUpdate", config)
}

// OnConfigUpdate indicates an expected call of OnConfigUpdate.
func (mr *MockWasmPluginHandlerMockRecorder) OnConfigUpdate(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConfigUpdate", reflect.TypeOf((*MockWasmPluginHandler)(nil).OnConfigUpdate), config)
}

// OnPluginStart mocks base method.
func (m *MockWasmPluginHandler) OnPluginStart(plugin types.WasmPlugin) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPluginStart", plugin)
}

// OnPluginStart indicates an expected call of OnPluginStart.
func (mr *MockWasmPluginHandlerMockRecorder) OnPluginStart(plugin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPluginStart", reflect.TypeOf((*MockWasmPluginHandler)(nil).OnPluginStart), plugin)
}

// OnPluginDestroy mocks base method.
func (m *MockWasmPluginHandler) OnPluginDestroy(plugin types.WasmPlugin) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPluginDestroy", plugin)
}

// OnPluginDestroy indicates an expected call of OnPluginDestroy.
func (mr *MockWasmPluginHandlerMockRecorder) OnPluginDestroy(plugin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPluginDestroy", reflect.TypeOf((*MockWasmPluginHandler)(nil).OnPluginDestroy), plugin)
}

// MockWasmPlugin is a mock of WasmPlugin interface.
type MockWasmPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockWasmPluginMockRecorder
}

// MockWasmPluginMockRecorder is the mock recorder for MockWasmPlugin.
type MockWasmPluginMockRecorder struct {
	mock *MockWasmPlugin
}

// NewMockWasmPlugin creates a new mock instance.
func NewMockWasmPlugin(ctrl *gomock.Controller) *MockWasmPlugin {
	mock := &MockWasmPlugin{ctrl: ctrl}
	mock.recorder = &MockWasmPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmPlugin) EXPECT() *MockWasmPluginMockRecorder {
	return m.recorder
}

// PluginName mocks base method.
func (m *MockWasmPlugin) PluginName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginName")
	ret0, _ := ret[0].(string)
	return ret0
}

// PluginName indicates an expected call of PluginName.
func (mr *MockWasmPluginMockRecorder) PluginName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginName", reflect.TypeOf((*MockWasmPlugin)(nil).PluginName))
}

// GetPluginConfig mocks base method.
func (m *MockWasmPlugin) GetPluginConfig() v2.WasmPluginConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginConfig")
	ret0, _ := ret[0].(v2.WasmPluginConfig)
	return ret0
}

// GetPluginConfig indicates an expected call of GetPluginConfig.
func (mr *MockWasmPluginMockRecorder) GetPluginConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginConfig", reflect.TypeOf((*MockWasmPlugin)(nil).GetPluginConfig))
}

// GetVmConfig mocks base method.
func (m *MockWasmPlugin) GetVmConfig() v2.WasmVmConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVmConfig")
	ret0, _ := ret[0].(v2.WasmVmConfig)
	return ret0
}

// GetVmConfig indicates an expected call of GetVmConfig.
func (mr *MockWasmPluginMockRecorder) GetVmConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVmConfig", reflect.TypeOf((*MockWasmPlugin)(nil).GetVmConfig))
}

// EnsureInstanceNum mocks base method.
func (m *MockWasmPlugin) EnsureInstanceNum(num int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureInstanceNum", num)
	ret0, _ := ret[0].(int)
	return ret0
}

// EnsureInstanceNum indicates an expected call of EnsureInstanceNum.
func (mr *MockWasmPluginMockRecorder) EnsureInstanceNum(num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureInstanceNum", reflect.TypeOf((*MockWasmPlugin)(nil).EnsureInstanceNum), num)
}

// InstanceNum mocks base method.
func (m *MockWasmPlugin) InstanceNum() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceNum")
	ret0, _ := ret[0].(int)
	return ret0
}

// InstanceNum indicates an expected call of InstanceNum.
func (mr *MockWasmPluginMockRecorder) InstanceNum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceNum", reflect.TypeOf((*MockWasmPlugin)(nil).InstanceNum))
}

// GetInstance mocks base method.
func (m *MockWasmPlugin) GetInstance() types.WasmInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance")
	ret0, _ := ret[0].(types.WasmInstance)
	return ret0
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockWasmPluginMockRecorder) GetInstance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockWasmPlugin)(nil).GetInstance))
}

// ReleaseInstance mocks base method.
func (m *MockWasmPlugin) ReleaseInstance(instance types.WasmInstance) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReleaseInstance", instance)
}

// ReleaseInstance indicates an expected call of ReleaseInstance.
func (mr *MockWasmPluginMockRecorder) ReleaseInstance(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseInstance", reflect.TypeOf((*MockWasmPlugin)(nil).ReleaseInstance), instance)
}

// Exec mocks base method.
func (m *MockWasmPlugin) Exec(f func(types.WasmInstance) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Exec", f)
}

// Exec indicates an expected call of Exec.
func (mr *MockWasmPluginMockRecorder) Exec(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockWasmPlugin)(nil).Exec), f)
}

// SetCpuLimit mocks base method.
func (m *MockWasmPlugin) SetCpuLimit(cpu int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCpuLimit", cpu)
}

// SetCpuLimit indicates an expected call of SetCpuLimit.
func (mr *MockWasmPluginMockRecorder) SetCpuLimit(cpu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCpuLimit", reflect.TypeOf((*MockWasmPlugin)(nil).SetCpuLimit), cpu)
}

// SetMemLimit mocks base method.
func (m *MockWasmPlugin) SetMemLimit(mem int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMemLimit", mem)
}

// SetMemLimit indicates an expected call of SetMemLimit.
func (mr *MockWasmPluginMockRecorder) SetMemLimit(mem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMemLimit", reflect.TypeOf((*MockWasmPlugin)(nil).SetMemLimit), mem)
}

// Clear mocks base method.
func (m *MockWasmPlugin) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockWasmPluginMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockWasmPlugin)(nil).Clear))
}

// MockWasmVM is a mock of WasmVM interface.
type MockWasmVM struct {
	ctrl     *gomock.Controller
	recorder *MockWasmVMMockRecorder
}

// MockWasmVMMockRecorder is the mock recorder for MockWasmVM.
type MockWasmVMMockRecorder struct {
	mock *MockWasmVM
}

// NewMockWasmVM creates a new mock instance.
func NewMockWasmVM(ctrl *gomock.Controller) *MockWasmVM {
	mock := &MockWasmVM{ctrl: ctrl}
	mock.recorder = &MockWasmVMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmVM) EXPECT() *MockWasmVMMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockWasmVM) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockWasmVMMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockWasmVM)(nil).Name))
}

// Init mocks base method.
func (m *MockWasmVM) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockWasmVMMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockWasmVM)(nil).Init))
}

// NewModule mocks base method.
func (m *MockWasmVM) NewModule(wasmBytes []byte) types.WasmModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewModule", wasmBytes)
	ret0, _ := ret[0].(types.WasmModule)
	return ret0
}

// NewModule indicates an expected call of NewModule.
func (mr *MockWasmVMMockRecorder) NewModule(wasmBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewModule", reflect.TypeOf((*MockWasmVM)(nil).NewModule), wasmBytes)
}

// MockWasmModule is a mock of WasmModule interface.
type MockWasmModule struct {
	ctrl     *gomock.Controller
	recorder *MockWasmModuleMockRecorder
}

// MockWasmModuleMockRecorder is the mock recorder for MockWasmModule.
type MockWasmModuleMockRecorder struct {
	mock *MockWasmModule
}

// NewMockWasmModule creates a new mock instance.
func NewMockWasmModule(ctrl *gomock.Controller) *MockWasmModule {
	mock := &MockWasmModule{ctrl: ctrl}
	mock.recorder = &MockWasmModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmModule) EXPECT() *MockWasmModuleMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockWasmModule) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockWasmModuleMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockWasmModule)(nil).Init))
}

// NewInstance mocks base method.
func (m *MockWasmModule) NewInstance() types.WasmInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewInstance")
	ret0, _ := ret[0].(types.WasmInstance)
	return ret0
}

// NewInstance indicates an expected call of NewInstance.
func (mr *MockWasmModuleMockRecorder) NewInstance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewInstance", reflect.TypeOf((*MockWasmModule)(nil).NewInstance))
}

// GetABINameList mocks base method.
func (m *MockWasmModule) GetABINameList() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetABINameList")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetABINameList indicates an expected call of GetABINameList.
func (mr *MockWasmModuleMockRecorder) GetABINameList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetABINameList", reflect.TypeOf((*MockWasmModule)(nil).GetABINameList))
}

// MockWasmInstance is a mock of WasmInstance interface.
type MockWasmInstance struct {
	ctrl     *gomock.Controller
	recorder *MockWasmInstanceMockRecorder
}

// MockWasmInstanceMockRecorder is the mock recorder for MockWasmInstance.
type MockWasmInstanceMockRecorder struct {
	mock *MockWasmInstance
}

// NewMockWasmInstance creates a new mock instance.
func NewMockWasmInstance(ctrl *gomock.Controller) *MockWasmInstance {
	mock := &MockWasmInstance{ctrl: ctrl}
	mock.recorder = &MockWasmInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmInstance) EXPECT() *MockWasmInstanceMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockWasmInstance) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockWasmInstanceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockWasmInstance)(nil).Start))
}

// Stop mocks base method.
func (m *MockWasmInstance) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockWasmInstanceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWasmInstance)(nil).Stop))
}

// RegisterFunc mocks base method.
func (m *MockWasmInstance) RegisterFunc(namespace, funcName string, f interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterFunc", namespace, funcName, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterFunc indicates an expected call of RegisterFunc.
func (mr *MockWasmInstanceMockRecorder) RegisterFunc(namespace, funcName, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFunc", reflect.TypeOf((*MockWasmInstance)(nil).RegisterFunc), namespace, funcName, f)
}

// GetExportsFunc mocks base method.
func (m *MockWasmInstance) GetExportsFunc(funcName string) (types.WasmFunction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExportsFunc", funcName)
	ret0, _ := ret[0].(types.WasmFunction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExportsFunc indicates an expected call of GetExportsFunc.
func (mr *MockWasmInstanceMockRecorder) GetExportsFunc(funcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExportsFunc", reflect.TypeOf((*MockWasmInstance)(nil).GetExportsFunc), funcName)
}

// GetExportsMem mocks base method.
func (m *MockWasmInstance) GetExportsMem(memName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExportsMem", memName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExportsMem indicates an expected call of GetExportsMem.
func (mr *MockWasmInstanceMockRecorder) GetExportsMem(memName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExportsMem", reflect.TypeOf((*MockWasmInstance)(nil).GetExportsMem), memName)
}

// GetMemory mocks base method.
func (m *MockWasmInstance) GetMemory(addr, size uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemory", addr, size)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemory indicates an expected call of GetMemory.
func (mr *MockWasmInstanceMockRecorder) GetMemory(addr, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemory", reflect.TypeOf((*MockWasmInstance)(nil).GetMemory), addr, size)
}

// PutMemory mocks base method.
func (m *MockWasmInstance) PutMemory(addr, size uint64, content []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMemory", addr, size, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMemory indicates an expected call of PutMemory.
func (mr *MockWasmInstanceMockRecorder) PutMemory(addr, size, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMemory", reflect.TypeOf((*MockWasmInstance)(nil).PutMemory), addr, size, content)
}

// GetByte mocks base method.
func (m *MockWasmInstance) GetByte(addr uint64) (byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByte", addr)
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByte indicates an expected call of GetByte.
func (mr *MockWasmInstanceMockRecorder) GetByte(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByte", reflect.TypeOf((*MockWasmInstance)(nil).GetByte), addr)
}

// PutByte mocks base method.
func (m *MockWasmInstance) PutByte(addr uint64, b byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutByte", addr, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutByte indicates an expected call of PutByte.
func (mr *MockWasmInstanceMockRecorder) PutByte(addr, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutByte", reflect.TypeOf((*MockWasmInstance)(nil).PutByte), addr, b)
}

// GetUint32 mocks base method.
func (m *MockWasmInstance) GetUint32(addr uint64) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUint32", addr)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUint32 indicates an expected call of GetUint32.
func (mr *MockWasmInstanceMockRecorder) GetUint32(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUint32", reflect.TypeOf((*MockWasmInstance)(nil).GetUint32), addr)
}

// PutUint32 mocks base method.
func (m *MockWasmInstance) PutUint32(addr uint64, value uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutUint32", addr, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutUint32 indicates an expected call of PutUint32.
func (mr *MockWasmInstanceMockRecorder) PutUint32(addr, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUint32", reflect.TypeOf((*MockWasmInstance)(nil).PutUint32), addr, value)
}

// Malloc mocks base method.
func (m *MockWasmInstance) Malloc(size int32) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Malloc", size)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Malloc indicates an expected call of Malloc.
func (mr *MockWasmInstanceMockRecorder) Malloc(size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Malloc", reflect.TypeOf((*MockWasmInstance)(nil).Malloc), size)
}

// GetData mocks base method.
func (m *MockWasmInstance) GetData() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetData indicates an expected call of GetData.
func (mr *MockWasmInstanceMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockWasmInstance)(nil).GetData))
}

// SetData mocks base method.
func (m *MockWasmInstance) SetData(data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetData", data)
}

// SetData indicates an expected call of SetData.
func (mr *MockWasmInstanceMockRecorder) SetData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetData", reflect.TypeOf((*MockWasmInstance)(nil).SetData), data)
}

// Acquire mocks base method.
func (m *MockWasmInstance) Acquire() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Acquire indicates an expected call of Acquire.
func (mr *MockWasmInstanceMockRecorder) Acquire() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockWasmInstance)(nil).Acquire))
}

// Release mocks base method.
func (m *MockWasmInstance) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockWasmInstanceMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockWasmInstance)(nil).Release))
}

// Lock mocks base method.
func (m *MockWasmInstance) Lock(data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock", data)
}

// Lock indicates an expected call of Lock.
func (mr *MockWasmInstanceMockRecorder) Lock(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockWasmInstance)(nil).Lock), data)
}

// Unlock mocks base method.
func (m *MockWasmInstance) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockWasmInstanceMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockWasmInstance)(nil).Unlock))
}

// GetModule mocks base method.
func (m *MockWasmInstance) GetModule() types.WasmModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModule")
	ret0, _ := ret[0].(types.WasmModule)
	return ret0
}

// GetModule indicates an expected call of GetModule.
func (mr *MockWasmInstanceMockRecorder) GetModule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModule", reflect.TypeOf((*MockWasmInstance)(nil).GetModule))
}

// HandleError mocks base method.
func (m *MockWasmInstance) HandleError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleError", err)
}

// HandleError indicates an expected call of HandleError.
func (mr *MockWasmInstanceMockRecorder) HandleError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleError", reflect.TypeOf((*MockWasmInstance)(nil).HandleError), err)
}

// MockWasmFunction is a mock of WasmFunction interface.
type MockWasmFunction struct {
	ctrl     *gomock.Controller
	recorder *MockWasmFunctionMockRecorder
}

// MockWasmFunctionMockRecorder is the mock recorder for MockWasmFunction.
type MockWasmFunctionMockRecorder struct {
	mock *MockWasmFunction
}

// NewMockWasmFunction creates a new mock instance.
func NewMockWasmFunction(ctrl *gomock.Controller) *MockWasmFunction {
	mock := &MockWasmFunction{ctrl: ctrl}
	mock.recorder = &MockWasmFunctionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmFunction) EXPECT() *MockWasmFunctionMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockWasmFunction) Call(args ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockWasmFunctionMockRecorder) Call(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockWasmFunction)(nil).Call), args...)
}

// MockABI is a mock of ABI interface.
type MockABI struct {
	ctrl     *gomock.Controller
	recorder *MockABIMockRecorder
}

// MockABIMockRecorder is the mock recorder for MockABI.
type MockABIMockRecorder struct {
	mock *MockABI
}

// NewMockABI creates a new mock instance.
func NewMockABI(ctrl *gomock.Controller) *MockABI {
	mock := &MockABI{ctrl: ctrl}
	mock.recorder = &MockABIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockABI) EXPECT() *MockABIMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockABI) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockABIMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockABI)(nil).Name))
}

// GetExports mocks base method.
func (m *MockABI) GetExports() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExports")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetExports indicates an expected call of GetExports.
func (mr *MockABIMockRecorder) GetExports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExports", reflect.TypeOf((*MockABI)(nil).GetExports))
}

// SetImports mocks base method.
func (m *MockABI) SetImports(imports interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetImports", imports)
}

// SetImports indicates an expected call of SetImports.
func (mr *MockABIMockRecorder) SetImports(imports interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetImports", reflect.TypeOf((*MockABI)(nil).SetImports), imports)
}

// OnInstanceCreate mocks base method.
func (m *MockABI) OnInstanceCreate(instance types.WasmInstance) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnInstanceCreate", instance)
}

// OnInstanceCreate indicates an expected call of OnInstanceCreate.
func (mr *MockABIMockRecorder) OnInstanceCreate(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnInstanceCreate", reflect.TypeOf((*MockABI)(nil).OnInstanceCreate), instance)
}

// OnInstanceStart mocks base method.
func (m *MockABI) OnInstanceStart(instance types.WasmInstance) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnInstanceStart", instance)
}

// OnInstanceStart indicates an expected call of OnInstanceStart.
func (mr *MockABIMockRecorder) OnInstanceStart(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnInstanceStart", reflect.TypeOf((*MockABI)(nil).OnInstanceStart), instance)
}

// OnInstanceDestroy mocks base method.
func (m *MockABI) OnInstanceDestroy(instance types.WasmInstance) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnInstanceDestroy", instance)
}

// OnInstanceDestroy indicates an expected call of OnInstanceDestroy.
func (mr *MockABIMockRecorder) OnInstanceDestroy(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnInstanceDestroy", reflect.TypeOf((*MockABI)(nil).OnInstanceDestroy), instance)
}

// MockABIHandler is a mock of ABIHandler interface.
type MockABIHandler struct {
	ctrl     *gomock.Controller
	recorder *MockABIHandlerMockRecorder
}

// MockABIHandlerMockRecorder is the mock recorder for MockABIHandler.
type MockABIHandlerMockRecorder struct {
	mock *MockABIHandler
}

// NewMockABIHandler creates a new mock instance.
func NewMockABIHandler(ctrl *gomock.Controller) *MockABIHandler {
	mock := &MockABIHandler{ctrl: ctrl}
	mock.recorder = &MockABIHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockABIHandler) EXPECT() *MockABIHandlerMockRecorder {
	return m.recorder
}

// OnInstanceCreate mocks base method.
func (m *MockABIHandler) OnInstanceCreate(instance types.WasmInstance) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnInstanceCreate", instance)
}

// OnInstanceCreate indicates an expected call of OnInstanceCreate.
func (mr *MockABIHandlerMockRecorder) OnInstanceCreate(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnInstanceCreate", reflect.TypeOf((*MockABIHandler)(nil).OnInstanceCreate), instance)
}

// OnInstanceStart mocks base method.
func (m *MockABIHandler) OnInstanceStart(instance types.WasmInstance) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnInstanceStart", instance)
}

// OnInstanceStart indicates an expected call of OnInstanceStart.
func (mr *MockABIHandlerMockRecorder) OnInstanceStart(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnInstanceStart", reflect.TypeOf((*MockABIHandler)(nil).OnInstanceStart), instance)
}

// OnInstanceDestroy mocks base method.
func (m *MockABIHandler) OnInstanceDestroy(instance types.WasmInstance) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnInstanceDestroy", instance)
}

// OnInstanceDestroy indicates an expected call of OnInstanceDestroy.
func (mr *MockABIHandlerMockRecorder) OnInstanceDestroy(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnInstanceDestroy", reflect.TypeOf((*MockABIHandler)(nil).OnInstanceDestroy), instance)
}
